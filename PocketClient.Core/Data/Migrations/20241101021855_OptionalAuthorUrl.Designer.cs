// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PocketClient.Core.Data;

#nullable disable

namespace PocketClient.Core.Data.Migrations
{
    [DbContext(typeof(PocketDbContext))]
    [Migration("20241101021855_OptionalAuthorUrl")]
    partial class OptionalAuthorUrl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("PocketClient.Core.Models.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("PocketClient.Core.Models.ItemAuthor", b =>
                {
                    b.Property<long>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("ItemAuthors", (string)null);
                });

            modelBuilder.Entity("PocketClient.Core.Models.ItemTag", b =>
                {
                    b.Property<long>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TagId")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ItemTags", (string)null);
                });

            modelBuilder.Entity("PocketClient.Core.Models.PocketItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Excerpt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasImage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorited")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lang")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeAdded")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeFavorited")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeRead")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeToRead")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TopImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WordCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("PocketClient.Core.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("PocketClient.Core.Models.ItemAuthor", b =>
                {
                    b.HasOne("PocketClient.Core.Models.Author", "Author")
                        .WithMany("ItemAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PocketClient.Core.Models.PocketItem", "Item")
                        .WithMany("ItemAuthors")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("PocketClient.Core.Models.ItemTag", b =>
                {
                    b.HasOne("PocketClient.Core.Models.PocketItem", "Item")
                        .WithMany("ItemTags")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PocketClient.Core.Models.Tag", "Tag")
                        .WithMany("ItemTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PocketClient.Core.Models.Author", b =>
                {
                    b.Navigation("ItemAuthors");
                });

            modelBuilder.Entity("PocketClient.Core.Models.PocketItem", b =>
                {
                    b.Navigation("ItemAuthors");

                    b.Navigation("ItemTags");
                });

            modelBuilder.Entity("PocketClient.Core.Models.Tag", b =>
                {
                    b.Navigation("ItemTags");
                });
#pragma warning restore 612, 618
        }
    }
}
